{"version":3,"file":"SQLite.js","sourceRoot":"","sources":["../src/SQLite.ts"],"names":[],"mappings":"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","sourcesContent":["import './polyfillNextTick';\n\nimport customOpenDatabase from '@expo/websql/custom';\nimport { NativeModulesProxy } from 'expo-modules-core';\nimport zipObject from 'lodash/zipObject';\nimport { Platform } from 'react-native';\n\nimport {\n  Query,\n  SQLiteCallback,\n  ResultSet,\n  ResultSetError,\n  WebSQLDatabase,\n  SQLStatementCallback,\n  SQLStatementErrorCallback,\n  Database,\n  SQLTransactionCallback,\n  SQLTransactionErrorCallback,\n} from './SQLite.types';\n\nconst { SweetSQLite } = NativeModulesProxy;\n\nclass SQLiteDatabase {\n  _name: string;\n  _closed: boolean = false;\n\n  constructor(name: string) {\n    this._name = name;\n  }\n\n  exec(queries: Query[], readOnly: boolean, callback: SQLiteCallback): void {\n    if (this._closed) {\n      throw new Error(`The SQLite database is closed`);\n    }\n\n    SweetSQLite.exec(this._name, queries.map(_serializeQuery), readOnly).then(\n      nativeResultSets => {\n        callback(null, nativeResultSets.map(_deserializeResultSet));\n      },\n      error => {\n        // TODO: make the native API consistently reject with an error, not a string or other type\n        callback(error instanceof Error ? error : new Error(error));\n      }\n    );\n  }\n\n  close() {\n    this._closed = true;\n    SweetSQLite.close(this._name);\n  }\n}\n\nfunction _serializeQuery(query: Query): [string, unknown[]] {\n  return [query.sql, Platform.OS === 'android' ? query.args.map(_escapeBlob) : query.args];\n}\n\nfunction _deserializeResultSet(nativeResult): ResultSet | ResultSetError {\n  const [errorMessage, insertId, rowsAffected, columns, rows] = nativeResult;\n  // TODO: send more structured error information from the native module so we can better construct\n  // a SQLException object\n  if (errorMessage !== null) {\n    return { error: new Error(errorMessage) } as ResultSetError;\n  }\n\n  return {\n    insertId,\n    rowsAffected,\n    rows: rows.map(row => zipObject(columns, row)),\n  };\n}\n\nfunction _escapeBlob<T>(data: T): T {\n  if (typeof data === 'string') {\n    /* eslint-disable no-control-regex */\n    return data\n      .replace(/\\u0002/g, '\\u0002\\u0002')\n      .replace(/\\u0001/g, '\\u0001\\u0002')\n      .replace(/\\u0000/g, '\\u0001\\u0001') as any;\n    /* eslint-enable no-control-regex */\n  } else {\n    return data;\n  }\n}\n\nconst _openExpoSQLiteDatabase = customOpenDatabase(SQLiteDatabase);\n\nfunction addExecMethod(db: any): WebSQLDatabase {\n  db.exec = (queries: Query[], readOnly: boolean, callback: SQLiteCallback): void => {\n    db._db.exec(queries, readOnly, callback);\n  };\n  return db;\n}\n\n// @needsAudit @docsMissing\n/**\n * Open a database, creating it if it doesn't exist, and return a `Database` object. On disk,\n * the database will be created under the app's [documents directory](../filesystem), i.e.\n * `${FileSystem.documentDirectory}/SQLite/${name}`.\n * > The `version`, `description` and `size` arguments are ignored, but are accepted by the function\n * for compatibility with the WebSQL specification.\n * @param name Name of the database file to open.\n * @param version\n * @param description\n * @param size\n * @param callback\n * @return\n */\nexport function openDatabase(\n  name: string,\n  version: string = '1.0',\n  description: string = name,\n  size: number = 1,\n  callback?: (db: WebSQLDatabase) => void\n): WebSQLDatabase {\n  if (name === undefined) {\n    throw new TypeError(`The database name must not be undefined`);\n  }\n  const db = _openExpoSQLiteDatabase(name, version, description, size, callback);\n  const dbWithExec = addExecMethod(db);\n  return dbWithExec;\n}\n\ntype QueryResult = ResultSet | ResultSetError;\ntype TransactionCallback = (tx: {\n  executeSql: (query: string) => Promise<QueryResult>;\n}) => Promise<void>;\n\nexport class SweetSQLiteDatabase {\n  constructor(private name: string) {\n    console.log(SweetSQLite);\n  }\n\n  version: string = '0.0';\n\n  async transaction(callback: TransactionCallback): Promise<void> {\n    try {\n      console.log(this.name);\n      await SweetSQLite.beginTransaction(this.name);\n\n      await callback({ executeSql: this.executeSql.bind(this) });\n\n      await SweetSQLite.setTransactionSuccessful(this.name);\n    } catch (err) {\n      console.error(err);\n      throw new Error('Transaction failed');\n    } finally {\n      await SweetSQLite.finishTransaction(this.name);\n    }\n  }\n\n  async executeSql(query: string): Promise<QueryResult> {\n    const [result] = await SweetSQLite.exec(\n      this.name,\n      [_serializeQuery({ sql: query, args: [] })],\n      false\n    );\n    return _deserializeResultSet(result);\n  }\n}\n\n///////////////////////////////////////////////////////////////////////////////////\n\ntype SelectResult = Pick<ResultSet, 'rows'> | ResultSetError;\ntype InsertResult = Pick<ResultSet, 'insertId' | 'rowsAffected'> | ResultSetError;\ntype UpdateResult = Pick<ResultSet, 'rowsAffected'> | ResultSetError;\n\ninterface SQLInterface {\n  // just convenience methods\n  select(query: Query): Promise<QueryResult>;\n  insert(query: Query): Promise<InsertResult>;\n  updateDelete(query: Query): Promise<UpdateResult>;\n  sql(query: Query): Promise<void>;\n\n  rawExecuteSql(query: Query): Promise<QueryResult>;\n}\n\ninterface SQLTransaction extends SQLInterface {\n  commit(): Promise<void>;\n  rollback(): Promise<void>;\n}\n\nexport class ExpoSQLiteDatabase {\n  static open(name: string): ExpoSQLiteDatabase {\n    return new ExpoSQLiteDatabase(name);\n  }\n\n  private constructor(private name: string) {}\n\n  async close() {}\n\n  private async singleTransaction(transactionBlock: (tx: SQLTransaction) => Promise<void>) {\n    try {\n      await this.rawExecuteSql({ sql: 'BEGIN EXCLUSIVE;', args: [] });\n    } catch (e) {\n      // Failed to begin transaction\n      return;\n    }\n\n    try {\n      await transactionBlock();\n    } catch (err) {\n    } finally {\n    }\n  }\n\n  // low-level api\n  async rawExecuteSql(query: Query): Promise<QueryResult> {\n    throw new Error();\n  }\n  async beginTransaction() {}\n  async endTransaction() {}\n}\n\n// const fff = openDatabase('asdf');\n// fff.transaction(tx => tx.executeSql());\n\nenum TransactionState {\n  NOT_STARTED,\n  PENDING,\n  COMITTED,\n  ROLLED_BACK,\n}\n\nclass ExpoSQLiteTransaction {\n  private state = TransactionState.NOT_STARTED;\n  constructor(private db: ExpoSQLiteDatabase) {}\n\n  async run(transactionBlock: (tx: SQLTransaction) => Promise<void>) {\n    //\n  }\n\n  async commit() {\n    if (this.isFinished()) return;\n\n    await this.db.rawExecuteSql({ sql: 'COMMIT;', args: [] });\n    this.state = TransactionState.COMITTED;\n  }\n\n  async rollback() {\n    if (this.isFinished()) return;\n\n    await this.db.rawExecuteSql({ sql: 'ROLLBACK;', args: [] });\n    this.state = TransactionState.ROLLED_BACK;\n  }\n\n  private isFinished() {\n    return this.state in [TransactionState.COMITTED, TransactionState.ROLLED_BACK];\n  }\n}\n\ninterface TransactionTask {\n  txn: ExpoSQLiteTransaction;\n  promise: Promise<void>;\n}\n\nclass TransactionQueue {}\n"]}